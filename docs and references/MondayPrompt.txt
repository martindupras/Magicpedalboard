## ③ Monday “kickoff” prompt (paste this to me to continue)

You are continuing my SuperCollider live-performance pedalboard built on JITLib Ndefs with A/B chains.
Context (latest state):
MagicPedalboardNew.sc is v0.3.8 (non-destructive rebuilds; crossfade switching 80–200 ms; Server.default APIs; safe reset only in reset).
MagicDisplay v0.1.2 (console) and MagicDisplayGUI v0.2.3 (CURRENT column in green; top→down src→procs→sink; “what you should hear”; visual countdown; ops list + Next; embedded meters; UI-ready queue).
Preflight in tests clears Ndefs and resets with Server.default.initTree + defaultGroup.freeAll (no s.freeAll; avoid double /n_free).
We have working NEXT mutations (add/addAt/removeAt/swap/clearChain), bypass for NEXT and CURRENT, effective list logic, and source setters for NEXT/CURRENT.
My style rules (REITERATE & ENFORCE STRICTLY): • Methods must start lowercase; no leading underscore.
• All var declarations first in every method and in every { … } block.
• Avoid single-letter local variables; use descriptive names.
• No server.sync anywhere.
• Prefer Server.default.bind { … } to bundle server ops.
• For server resets: use Server.default.waitForBoot, Server.default.initTree, Server.default.defaultGroup.freeAll (no s.freeAll).
• Chains are Arrays of Symbols: [sink, … processors …, source], sinks \chainA, \chainB.
• setSource applies to NEXT; setSourceCurrent applies to CURRENT.
• Rebuilds should ensure Ndef busses (ar(defaultNumChannels)); do wiring with Ndef(left) <<> Ndef(right).
• Print detailed chains with indices, bypass state, and effective (post-bypass) list.
• Space after accessors (e.g., classvar < version;, var < display;).
• Each file header must have the file name and the timestamp on the next line exactly like: //MD YYYYMMDD-HHMM.
What I want next (prioritized tasks):
GUI polish:

Add per-processor parameter badges (e.g., \tremolo (rate=4, depth=0.8)), refreshed on showChainsDetailed.
Tint the CURRENT meter row and flip the tint on showSwitch.
(Optional) Small device/channels readout pane.
Tests:

Parameter sweeps with clear audible expectations and level assertions (thresholds) to validate processing.
Edge cases: bypass then remove; multiple processors; clear while bypassed; setSource/setSourceCurrent transitions.
API:

Add a configurable defaultCrossfade with getter/setter (bounds 0.08–0.20) used by switchChain.
Constraints:
Keep all code strictly compliant with my style rules above.
No use of s in class files; only Server.default.
Do not add server.sync.
If you add GUI elements, keep all UI updates nil-safe and AppClock-safe (var-first in closures).
Deliverables:
Updated .sc files with headers (//MD YYYYMMDD-HHMM) and comments describing changes.
Updated tests (filenames with timestamps) demonstrating the new GUI features and assertions.
A short runbook to validate sound (sanity check: define \tsSaw, play CURRENT; then run GUI ops and confirm meters).
Now proceed with step 1 (GUI parameter badges + current meter tint), then provide the files and a 60-sec verification script I can run.